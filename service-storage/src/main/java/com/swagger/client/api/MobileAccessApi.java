/*
 * MobileAccess v1.3.0
 *  ##### **NaaS API Version:** 2.4.0 ##### **mobileAccess service version:** 1.2.3 ## OVERVIEW TMF 640 - Activation and Configuration API. This is a strategic mobileAccess service aiming to provide network capabilities to products.   **Note: Enum values are case sensitive**
 *
 * OpenAPI spec version: 2.4.5
 * Contact: D1701045@team.telstra.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.swagger.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.context.annotation.Configuration;

import com.google.gson.reflect.TypeToken;
import com.swagger.client.ApiCallback;
import com.swagger.client.ApiClient;
import com.swagger.client.ApiException;
import com.swagger.client.ApiResponse;
import com.swagger.client.Pair;
import com.swagger.client.ProgressRequestBody;
import com.swagger.client.ProgressResponseBody;

import io.swagger.client.model.MobileAccessPostRequest;
import io.swagger.client.model.ServiceAcknowledgement;
import io.swagger.client.model.ServicePatchInner;
import io.swagger.client.model.ServicePrimary;

public class MobileAccessApi {
    private ApiClient apiClient;

    public MobileAccessApi() {
 //       this(Configuration.getDefaultApiClient());
    }

    public MobileAccessApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for primaryServiceCreate
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call primaryServiceCreateCall(MobileAccessPostRequest body, String authorization, String xCorrelationID, String xGroupID, String xLatestVersion, String xSubGroupID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/service/mobileAccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));
        if (xGroupID != null)
        localVarHeaderParams.put("X-Group-ID", apiClient.parameterToString(xGroupID));
        if (xSubGroupID != null)
        localVarHeaderParams.put("X-SubGroup-ID", apiClient.parameterToString(xSubGroupID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call primaryServiceCreateValidateBeforeCall(MobileAccessPostRequest body, String authorization, String xCorrelationID, String xGroupID, String xLatestVersion, String xSubGroupID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling primaryServiceCreate(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling primaryServiceCreate(Async)");
        }
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling primaryServiceCreate(Async)");
        }
        // verify the required parameter 'xGroupID' is set
        if (xGroupID == null) {
            throw new ApiException("Missing the required parameter 'xGroupID' when calling primaryServiceCreate(Async)");
        }
        
        com.squareup.okhttp.Call call = primaryServiceCreateCall(body, authorization, xCorrelationID, xGroupID, xLatestVersion, xSubGroupID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create mobileAccess with supporting services
     * This method is used to create **mobileAccess** top-level service AND create a  set of supporting services as a result of a single API call. supportingService object must have state, seriviceSpecification and serviceCharacteristics for each of the supporting services, which needs to be created as a part of the same POST request.   RelatedParty must be provided at **mobileAccess** level. RelatedParty does not have to be provided at supportingService level; if RelatedParty is not provided at supportingService level, RelatedParty of mobileAccess will be applied to each of the supporting services. 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @return ServiceAcknowledgement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceAcknowledgement primaryServiceCreate(MobileAccessPostRequest body, String authorization, String xCorrelationID, String xGroupID, String xLatestVersion, String xSubGroupID) throws ApiException {
        ApiResponse<ServiceAcknowledgement> resp = primaryServiceCreateWithHttpInfo(body, authorization, xCorrelationID, xGroupID, xLatestVersion, xSubGroupID);
        return resp.getData();
    }

    /**
     * Create mobileAccess with supporting services
     * This method is used to create **mobileAccess** top-level service AND create a  set of supporting services as a result of a single API call. supportingService object must have state, seriviceSpecification and serviceCharacteristics for each of the supporting services, which needs to be created as a part of the same POST request.   RelatedParty must be provided at **mobileAccess** level. RelatedParty does not have to be provided at supportingService level; if RelatedParty is not provided at supportingService level, RelatedParty of mobileAccess will be applied to each of the supporting services. 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @return ApiResponse&lt;ServiceAcknowledgement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceAcknowledgement> primaryServiceCreateWithHttpInfo(MobileAccessPostRequest body, String authorization, String xCorrelationID, String xGroupID, String xLatestVersion, String xSubGroupID) throws ApiException {
        com.squareup.okhttp.Call call = primaryServiceCreateValidateBeforeCall(body, authorization, xCorrelationID, xGroupID, xLatestVersion, xSubGroupID, null, null);
        Type localVarReturnType = new TypeToken<ServiceAcknowledgement>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create mobileAccess with supporting services (asynchronously)
     * This method is used to create **mobileAccess** top-level service AND create a  set of supporting services as a result of a single API call. supportingService object must have state, seriviceSpecification and serviceCharacteristics for each of the supporting services, which needs to be created as a part of the same POST request.   RelatedParty must be provided at **mobileAccess** level. RelatedParty does not have to be provided at supportingService level; if RelatedParty is not provided at supportingService level, RelatedParty of mobileAccess will be applied to each of the supporting services. 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call primaryServiceCreateAsync(MobileAccessPostRequest body, String authorization, String xCorrelationID, String xGroupID, String xLatestVersion, String xSubGroupID, final ApiCallback<ServiceAcknowledgement> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = primaryServiceCreateValidateBeforeCall(body, authorization, xCorrelationID, xGroupID, xLatestVersion, xSubGroupID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceAcknowledgement>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for serviceDelete
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceDeleteCall(String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, String xSubGroupID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/service/mobileAccess/{Id}"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));
        if (xGroupID != null)
        localVarHeaderParams.put("X-Group-ID", apiClient.parameterToString(xGroupID));
        if (xSubGroupID != null)
        localVarHeaderParams.put("X-SubGroup-ID", apiClient.parameterToString(xSubGroupID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceDeleteValidateBeforeCall(String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, String xSubGroupID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling serviceDelete(Async)");
        }
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling serviceDelete(Async)");
        }
        // verify the required parameter 'xGroupID' is set
        if (xGroupID == null) {
            throw new ApiException("Missing the required parameter 'xGroupID' when calling serviceDelete(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling serviceDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = serviceDeleteCall(authorization, xCorrelationID, xGroupID, id, xLatestVersion, xSubGroupID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * serviceDelete
     * Delete mobileAccess instance.  Asynchronous operation.
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @return ServiceAcknowledgement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceAcknowledgement serviceDelete(String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, String xSubGroupID) throws ApiException {
        ApiResponse<ServiceAcknowledgement> resp = serviceDeleteWithHttpInfo(authorization, xCorrelationID, xGroupID, id, xLatestVersion, xSubGroupID);
        return resp.getData();
    }

    /**
     * serviceDelete
     * Delete mobileAccess instance.  Asynchronous operation.
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @return ApiResponse&lt;ServiceAcknowledgement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceAcknowledgement> serviceDeleteWithHttpInfo(String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, String xSubGroupID) throws ApiException {
        com.squareup.okhttp.Call call = serviceDeleteValidateBeforeCall(authorization, xCorrelationID, xGroupID, id, xLatestVersion, xSubGroupID, null, null);
        Type localVarReturnType = new TypeToken<ServiceAcknowledgement>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * serviceDelete (asynchronously)
     * Delete mobileAccess instance.  Asynchronous operation.
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceDeleteAsync(String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, String xSubGroupID, final ApiCallback<ServiceAcknowledgement> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceDeleteValidateBeforeCall(authorization, xCorrelationID, xGroupID, id, xLatestVersion, xSubGroupID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceAcknowledgement>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for serviceGetPrimary
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token***. Note: Authorization header must be present in Consumer requests to NaaS; however, it is expected that NaaS strips off the header before passing GET request to WDM. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param serviceDepth Identifier of a Service Depth in Integer format. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceGetPrimaryCall(String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, Integer serviceDepth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/service/mobileAccess/{Id}"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceDepth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceDepth", serviceDepth));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));
        if (xGroupID != null)
        localVarHeaderParams.put("X-Group-ID", apiClient.parameterToString(xGroupID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceGetPrimaryValidateBeforeCall(String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, Integer serviceDepth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling serviceGetPrimary(Async)");
        }
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling serviceGetPrimary(Async)");
        }
        // verify the required parameter 'xGroupID' is set
        if (xGroupID == null) {
            throw new ApiException("Missing the required parameter 'xGroupID' when calling serviceGetPrimary(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling serviceGetPrimary(Async)");
        }
        
        com.squareup.okhttp.Call call = serviceGetPrimaryCall(authorization, xCorrelationID, xGroupID, id, xLatestVersion, serviceDepth, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get mobileAccess service
     * This operation is used to retrieve a Service Instance item based on service ID/UUID.  Successful GET response will return   1) full specification of mobileAccess service instance,   2) full specification of all of its supporting services   Note: GET operation is supported only for mobileAccess endpoint and mobileAccess UUID. Direct GET on a supporting service is NOT supported as supporting services are not exposed via NaaS.  Synchronous operation. 
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token***. Note: Authorization header must be present in Consumer requests to NaaS; however, it is expected that NaaS strips off the header before passing GET request to WDM. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param serviceDepth Identifier of a Service Depth in Integer format. (optional)
     * @return ServicePrimary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServicePrimary serviceGetPrimary(String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, Integer serviceDepth) throws ApiException {
        ApiResponse<ServicePrimary> resp = serviceGetPrimaryWithHttpInfo(authorization, xCorrelationID, xGroupID, id, xLatestVersion, serviceDepth);
        return resp.getData();
    }

    /**
     * Get mobileAccess service
     * This operation is used to retrieve a Service Instance item based on service ID/UUID.  Successful GET response will return   1) full specification of mobileAccess service instance,   2) full specification of all of its supporting services   Note: GET operation is supported only for mobileAccess endpoint and mobileAccess UUID. Direct GET on a supporting service is NOT supported as supporting services are not exposed via NaaS.  Synchronous operation. 
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token***. Note: Authorization header must be present in Consumer requests to NaaS; however, it is expected that NaaS strips off the header before passing GET request to WDM. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param serviceDepth Identifier of a Service Depth in Integer format. (optional)
     * @return ApiResponse&lt;ServicePrimary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServicePrimary> serviceGetPrimaryWithHttpInfo(String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, Integer serviceDepth) throws ApiException {
        com.squareup.okhttp.Call call = serviceGetPrimaryValidateBeforeCall(authorization, xCorrelationID, xGroupID, id, xLatestVersion, serviceDepth, null, null);
        Type localVarReturnType = new TypeToken<ServicePrimary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get mobileAccess service (asynchronously)
     * This operation is used to retrieve a Service Instance item based on service ID/UUID.  Successful GET response will return   1) full specification of mobileAccess service instance,   2) full specification of all of its supporting services   Note: GET operation is supported only for mobileAccess endpoint and mobileAccess UUID. Direct GET on a supporting service is NOT supported as supporting services are not exposed via NaaS.  Synchronous operation. 
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token***. Note: Authorization header must be present in Consumer requests to NaaS; however, it is expected that NaaS strips off the header before passing GET request to WDM. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param serviceDepth Identifier of a Service Depth in Integer format. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceGetPrimaryAsync(String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, Integer serviceDepth, final ApiCallback<ServicePrimary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceGetPrimaryValidateBeforeCall(authorization, xCorrelationID, xGroupID, id, xLatestVersion, serviceDepth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServicePrimary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for servicePatch
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @param contentType The content type that the request is using. Supported type is json-patch+query. (optional)
     * @param serviceDepth Identifier of a Service Depth in Integer format. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call servicePatchCall(List<ServicePatchInner> body, String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, String xSubGroupID, String contentType, Integer serviceDepth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/service/mobileAccess/{Id}"
            .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceDepth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("serviceDepth", serviceDepth));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));
        if (xGroupID != null)
        localVarHeaderParams.put("X-Group-ID", apiClient.parameterToString(xGroupID));
        if (xSubGroupID != null)
        localVarHeaderParams.put("X-SubGroup-ID", apiClient.parameterToString(xSubGroupID));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+query"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call servicePatchValidateBeforeCall(List<ServicePatchInner> body, String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, String xSubGroupID, String contentType, Integer serviceDepth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling servicePatch(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling servicePatch(Async)");
        }
        // verify the required parameter 'xCorrelationID' is set
        if (xCorrelationID == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationID' when calling servicePatch(Async)");
        }
        // verify the required parameter 'xGroupID' is set
        if (xGroupID == null) {
            throw new ApiException("Missing the required parameter 'xGroupID' when calling servicePatch(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling servicePatch(Async)");
        }
        
        com.squareup.okhttp.Call call = servicePatchCall(body, authorization, xCorrelationID, xGroupID, id, xLatestVersion, xSubGroupID, contentType, serviceDepth, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Patch mobileAccess service
     * Example in this section shows how to construct patch query to add features/attributes into top-level mobileAccess service. Please refer to the contract document for more examples. Asynchronous operation. 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @param contentType The content type that the request is using. Supported type is json-patch+query. (optional)
     * @param serviceDepth Identifier of a Service Depth in Integer format. (optional)
     * @return ServiceAcknowledgement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceAcknowledgement servicePatch(List<ServicePatchInner> body, String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, String xSubGroupID, String contentType, Integer serviceDepth) throws ApiException {
        ApiResponse<ServiceAcknowledgement> resp = servicePatchWithHttpInfo(body, authorization, xCorrelationID, xGroupID, id, xLatestVersion, xSubGroupID, contentType, serviceDepth);
        return resp.getData();
    }

    /**
     * Patch mobileAccess service
     * Example in this section shows how to construct patch query to add features/attributes into top-level mobileAccess service. Please refer to the contract document for more examples. Asynchronous operation. 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @param contentType The content type that the request is using. Supported type is json-patch+query. (optional)
     * @param serviceDepth Identifier of a Service Depth in Integer format. (optional)
     * @return ApiResponse&lt;ServiceAcknowledgement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceAcknowledgement> servicePatchWithHttpInfo(List<ServicePatchInner> body, String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, String xSubGroupID, String contentType, Integer serviceDepth) throws ApiException {
        com.squareup.okhttp.Call call = servicePatchValidateBeforeCall(body, authorization, xCorrelationID, xGroupID, id, xLatestVersion, xSubGroupID, contentType, serviceDepth, null, null);
        Type localVarReturnType = new TypeToken<ServiceAcknowledgement>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Patch mobileAccess service (asynchronously)
     * Example in this section shows how to construct patch query to add features/attributes into top-level mobileAccess service. Please refer to the contract document for more examples. Asynchronous operation. 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance in uuid format. (required)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xSubGroupID Unique String that will be used in conjunction with X-Group-ID to identify unique client by NAL. This is to support NAL for applying fine-grained filtering of event notifications published by WDM. (optional)
     * @param contentType The content type that the request is using. Supported type is json-patch+query. (optional)
     * @param serviceDepth Identifier of a Service Depth in Integer format. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call servicePatchAsync(List<ServicePatchInner> body, String authorization, String xCorrelationID, String xGroupID, String id, String xLatestVersion, String xSubGroupID, String contentType, Integer serviceDepth, final ApiCallback<ServiceAcknowledgement> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = servicePatchValidateBeforeCall(body, authorization, xCorrelationID, xGroupID, id, xLatestVersion, xSubGroupID, contentType, serviceDepth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceAcknowledgement>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
