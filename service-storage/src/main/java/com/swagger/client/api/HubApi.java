/*
 * MobileAccess v1.3.0
 *  ##### **NaaS API Version:** 2.4.0 ##### **mobileAccess service version:** 1.2.3 ## OVERVIEW TMF 640 - Activation and Configuration API. This is a strategic mobileAccess service aiming to provide network capabilities to products.   **Note: Enum values are case sensitive**
 *
 * OpenAPI spec version: 2.4.5
 * Contact: D1701045@team.telstra.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.swagger.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.swagger.client.ApiCallback;
import com.swagger.client.ApiClient;
import com.swagger.client.ApiException;
import com.swagger.client.ApiResponse;
import com.swagger.client.Configuration;
import com.swagger.client.Pair;
import com.swagger.client.ProgressRequestBody;
import com.swagger.client.ProgressResponseBody;

import io.swagger.client.model.HubCreate;
import io.swagger.client.model.ResponseHub;
import io.swagger.client.model.ResponseHubServiceType;

public class HubApi {
    private ApiClient apiClient;

    public HubApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HubApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for hub
     * @param authorization A header in NaaS API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param body  (optional)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hubCall(String authorization, HubCreate body, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/hub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hubValidateBeforeCall(String authorization, HubCreate body, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling hub(Async)");
        }
        
        com.squareup.okhttp.Call call = hubCall(authorization, body, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a subscriptionhubCreate
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in NaaS API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param body  (optional)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return List&lt;ResponseHub&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ResponseHub> hub(String authorization, HubCreate body, String xCorrelationID, String xLatestVersion) throws ApiException {
        ApiResponse<List<ResponseHub>> resp = hubWithHttpInfo(authorization, body, xCorrelationID, xLatestVersion);
        return resp.getData();
    }

    /**
     * Create a subscriptionhubCreate
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in NaaS API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param body  (optional)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return ApiResponse&lt;List&lt;ResponseHub&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ResponseHub>> hubWithHttpInfo(String authorization, HubCreate body, String xCorrelationID, String xLatestVersion) throws ApiException {
        com.squareup.okhttp.Call call = hubValidateBeforeCall(authorization, body, xCorrelationID, xLatestVersion, null, null);
        Type localVarReturnType = new TypeToken<List<ResponseHub>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a subscriptionhubCreate (asynchronously)
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in NaaS API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param body  (optional)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hubAsync(String authorization, HubCreate body, String xCorrelationID, String xLatestVersion, final ApiCallback<List<ResponseHub>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hubValidateBeforeCall(authorization, body, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ResponseHub>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for hubCreate
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param serviceType Unique name of the Service. Also known as &#x27;Service Mnemonic&#x27; or &#x27;Service Specification Name&#x27; (required)
     * @param body  (optional)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hubCreateCall(String authorization, String serviceType, HubCreate body, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/hub/{service_type}"
            .replaceAll("\\{" + "service_type" + "\\}", apiClient.escapeString(serviceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hubCreateValidateBeforeCall(String authorization, String serviceType, HubCreate body, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling hubCreate(Async)");
        }
        // verify the required parameter 'serviceType' is set
        if (serviceType == null) {
            throw new ApiException("Missing the required parameter 'serviceType' when calling hubCreate(Async)");
        }
        
        com.squareup.okhttp.Call call = hubCreateCall(authorization, serviceType, body, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a subscription for a specific service
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param serviceType Unique name of the Service. Also known as &#x27;Service Mnemonic&#x27; or &#x27;Service Specification Name&#x27; (required)
     * @param body  (optional)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return List&lt;ResponseHubServiceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ResponseHubServiceType> hubCreate(String authorization, String serviceType, HubCreate body, String xCorrelationID, String xLatestVersion) throws ApiException {
        ApiResponse<List<ResponseHubServiceType>> resp = hubCreateWithHttpInfo(authorization, serviceType, body, xCorrelationID, xLatestVersion);
        return resp.getData();
    }

    /**
     * Create a subscription for a specific service
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param serviceType Unique name of the Service. Also known as &#x27;Service Mnemonic&#x27; or &#x27;Service Specification Name&#x27; (required)
     * @param body  (optional)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return ApiResponse&lt;List&lt;ResponseHubServiceType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ResponseHubServiceType>> hubCreateWithHttpInfo(String authorization, String serviceType, HubCreate body, String xCorrelationID, String xLatestVersion) throws ApiException {
        com.squareup.okhttp.Call call = hubCreateValidateBeforeCall(authorization, serviceType, body, xCorrelationID, xLatestVersion, null, null);
        Type localVarReturnType = new TypeToken<List<ResponseHubServiceType>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a subscription for a specific service (asynchronously)
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param serviceType Unique name of the Service. Also known as &#x27;Service Mnemonic&#x27; or &#x27;Service Specification Name&#x27; (required)
     * @param body  (optional)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hubCreateAsync(String authorization, String serviceType, HubCreate body, String xCorrelationID, String xLatestVersion, final ApiCallback<List<ResponseHubServiceType>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hubCreateValidateBeforeCall(authorization, serviceType, body, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ResponseHubServiceType>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for hubDelete
     * @param authorization A header in NaaS API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param id Hub ID (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hubDeleteCall(String authorization, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/hub/{id}/"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hubDeleteValidateBeforeCall(String authorization, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling hubDelete(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling hubDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = hubDeleteCall(authorization, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a subscription
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in NaaS API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param id Hub ID (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void hubDelete(String authorization, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        hubDeleteWithHttpInfo(authorization, id, xCorrelationID, xLatestVersion);
    }

    /**
     * Delete a subscription
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in NaaS API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param id Hub ID (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> hubDeleteWithHttpInfo(String authorization, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        com.squareup.okhttp.Call call = hubDeleteValidateBeforeCall(authorization, id, xCorrelationID, xLatestVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a subscription (asynchronously)
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in NaaS API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param id Hub ID (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hubDeleteAsync(String authorization, String id, String xCorrelationID, String xLatestVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hubDeleteValidateBeforeCall(authorization, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for hubFind
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xTotalCount NaaS is expected to provide this as part of response which specify total number of matching resources to the Get Hub Call (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hubFindCall(String authorization, String xCorrelationID, String xLatestVersion, String xTotalCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/hub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));
        if (xTotalCount != null)
        localVarHeaderParams.put("X-Total-Count", apiClient.parameterToString(xTotalCount));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hubFindValidateBeforeCall(String authorization, String xCorrelationID, String xLatestVersion, String xTotalCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling hubFind(Async)");
        }
        
        com.squareup.okhttp.Call call = hubFindCall(authorization, xCorrelationID, xLatestVersion, xTotalCount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all subscriptions
     * Hub is the repository of subscribers with their respective callback URLs. Response should include all the subscriptions made by that client Doesnot support Query or Field parameter for now. 
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xTotalCount NaaS is expected to provide this as part of response which specify total number of matching resources to the Get Hub Call (optional)
     * @return List&lt;ResponseHub&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ResponseHub> hubFind(String authorization, String xCorrelationID, String xLatestVersion, String xTotalCount) throws ApiException {
        ApiResponse<List<ResponseHub>> resp = hubFindWithHttpInfo(authorization, xCorrelationID, xLatestVersion, xTotalCount);
        return resp.getData();
    }

    /**
     * Get all subscriptions
     * Hub is the repository of subscribers with their respective callback URLs. Response should include all the subscriptions made by that client Doesnot support Query or Field parameter for now. 
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xTotalCount NaaS is expected to provide this as part of response which specify total number of matching resources to the Get Hub Call (optional)
     * @return ApiResponse&lt;List&lt;ResponseHub&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ResponseHub>> hubFindWithHttpInfo(String authorization, String xCorrelationID, String xLatestVersion, String xTotalCount) throws ApiException {
        com.squareup.okhttp.Call call = hubFindValidateBeforeCall(authorization, xCorrelationID, xLatestVersion, xTotalCount, null, null);
        Type localVarReturnType = new TypeToken<List<ResponseHub>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all subscriptions (asynchronously)
     * Hub is the repository of subscribers with their respective callback URLs. Response should include all the subscriptions made by that client Doesnot support Query or Field parameter for now. 
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param xTotalCount NaaS is expected to provide this as part of response which specify total number of matching resources to the Get Hub Call (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hubFindAsync(String authorization, String xCorrelationID, String xLatestVersion, String xTotalCount, final ApiCallback<List<ResponseHub>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hubFindValidateBeforeCall(authorization, xCorrelationID, xLatestVersion, xTotalCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ResponseHub>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for hubGet
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param id Hub ID (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call hubGetCall(String authorization, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/hub/{id}/"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call hubGetValidateBeforeCall(String authorization, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling hubGet(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling hubGet(Async)");
        }
        
        com.squareup.okhttp.Call call = hubGetCall(authorization, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a subscription by id
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param id Hub ID (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return List&lt;ResponseHubServiceType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ResponseHubServiceType> hubGet(String authorization, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        ApiResponse<List<ResponseHubServiceType>> resp = hubGetWithHttpInfo(authorization, id, xCorrelationID, xLatestVersion);
        return resp.getData();
    }

    /**
     * Get a subscription by id
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param id Hub ID (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return ApiResponse&lt;List&lt;ResponseHubServiceType&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ResponseHubServiceType>> hubGetWithHttpInfo(String authorization, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        com.squareup.okhttp.Call call = hubGetValidateBeforeCall(authorization, id, xCorrelationID, xLatestVersion, null, null);
        Type localVarReturnType = new TypeToken<List<ResponseHubServiceType>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a subscription by id (asynchronously)
     * Hub is the repository of subscribers with their respective callback URLs.
     * @param authorization A header in naas API calls to provide token details. Format - **Bearer {access_token}** (required)
     * @param id Hub ID (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call hubGetAsync(String authorization, String id, String xCorrelationID, String xLatestVersion, final ApiCallback<List<ResponseHubServiceType>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = hubGetValidateBeforeCall(authorization, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ResponseHubServiceType>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
