/*
 * MobileAccess v1.3.0
 *  ##### **NaaS API Version:** 2.4.0 ##### **mobileAccess service version:** 1.2.3 ## OVERVIEW TMF 640 - Activation and Configuration API. This is a strategic mobileAccess service aiming to provide network capabilities to products.   **Note: Enum values are case sensitive**
 *
 * OpenAPI spec version: 2.4.5
 * Contact: D1701045@team.telstra.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.swagger.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.swagger.client.ApiCallback;
import com.swagger.client.ApiClient;
import com.swagger.client.ApiException;
import com.swagger.client.ApiResponse;
import com.swagger.client.Configuration;
import com.swagger.client.Pair;
import com.swagger.client.ProgressRequestBody;
import com.swagger.client.ProgressResponseBody;

import io.swagger.client.model.TaskRequest;
import io.swagger.client.model.TaskResponseSubBar;
import io.swagger.client.model.TaskResponseVM;

public class TaskApi {
    private ApiClient apiClient;

    public TaskApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for chown
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call chownCall(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/service/mobileAccess/{id}/reset"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));
        if (xGroupID != null)
        localVarHeaderParams.put("X-Group-ID", apiClient.parameterToString(xGroupID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call chownValidateBeforeCall(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling chown(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling chown(Async)");
        }
        // verify the required parameter 'xGroupID' is set
        if (xGroupID == null) {
            throw new ApiException("Missing the required parameter 'xGroupID' when calling chown(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling chown(Async)");
        }
        
        com.squareup.okhttp.Call call = chownCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * task for \&quot;Change of ownership\&quot; scenario
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void chown(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        chownWithHttpInfo(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion);
    }

    /**
     * task for \&quot;Change of ownership\&quot; scenario
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> chownWithHttpInfo(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        com.squareup.okhttp.Call call = chownValidateBeforeCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     * task for \&quot;Change of ownership\&quot; scenario (asynchronously)
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call chownAsync(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = chownValidateBeforeCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for realign
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call realignCall(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/service/mobileAccess/{id}/realign"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));
        if (xGroupID != null)
        localVarHeaderParams.put("X-Group-ID", apiClient.parameterToString(xGroupID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call realignValidateBeforeCall(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling realign(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling realign(Async)");
        }
        // verify the required parameter 'xGroupID' is set
        if (xGroupID == null) {
            throw new ApiException("Missing the required parameter 'xGroupID' when calling realign(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling realign(Async)");
        }
        
        com.squareup.okhttp.Call call = realignCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * task to align network configuration of a service with the service inventory
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void realign(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        realignWithHttpInfo(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion);
    }

    /**
     * task to align network configuration of a service with the service inventory
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> realignWithHttpInfo(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        com.squareup.okhttp.Call call = realignValidateBeforeCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     * task to align network configuration of a service with the service inventory (asynchronously)
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call realignAsync(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = realignValidateBeforeCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for subPwdReset
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call subPwdResetCall(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/service/mobileAccess/{id}/subBarPwdReset"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));
        if (xGroupID != null)
        localVarHeaderParams.put("X-Group-ID", apiClient.parameterToString(xGroupID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call subPwdResetValidateBeforeCall(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling subPwdReset(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling subPwdReset(Async)");
        }
        // verify the required parameter 'xGroupID' is set
        if (xGroupID == null) {
            throw new ApiException("Missing the required parameter 'xGroupID' when calling subPwdReset(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling subPwdReset(Async)");
        }
        
        com.squareup.okhttp.Call call = subPwdResetCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * task for \&quot;Subscriber Barring Password reset\&quot; scenario
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return TaskResponseSubBar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskResponseSubBar subPwdReset(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        ApiResponse<TaskResponseSubBar> resp = subPwdResetWithHttpInfo(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion);
        return resp.getData();
    }

    /**
     * task for \&quot;Subscriber Barring Password reset\&quot; scenario
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return ApiResponse&lt;TaskResponseSubBar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskResponseSubBar> subPwdResetWithHttpInfo(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        com.squareup.okhttp.Call call = subPwdResetValidateBeforeCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, null, null);
        Type localVarReturnType = new TypeToken<TaskResponseSubBar>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * task for \&quot;Subscriber Barring Password reset\&quot; scenario (asynchronously)
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call subPwdResetAsync(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ApiCallback<TaskResponseSubBar> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = subPwdResetValidateBeforeCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskResponseSubBar>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vmPinReset
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vmPinResetCall(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/activationAndConfiguration/v2/service/mobileAccess/{id}/vmPinReset"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xCorrelationID != null)
        localVarHeaderParams.put("X-Correlation-ID", apiClient.parameterToString(xCorrelationID));
        if (xLatestVersion != null)
        localVarHeaderParams.put("X-LatestVersion", apiClient.parameterToString(xLatestVersion));
        if (xGroupID != null)
        localVarHeaderParams.put("X-Group-ID", apiClient.parameterToString(xGroupID));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vmPinResetValidateBeforeCall(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling vmPinReset(Async)");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling vmPinReset(Async)");
        }
        // verify the required parameter 'xGroupID' is set
        if (xGroupID == null) {
            throw new ApiException("Missing the required parameter 'xGroupID' when calling vmPinReset(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling vmPinReset(Async)");
        }
        
        com.squareup.okhttp.Call call = vmPinResetCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * task for \&quot;Voicemail PIN reset\&quot; scenario
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return TaskResponseVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TaskResponseVM vmPinReset(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        ApiResponse<TaskResponseVM> resp = vmPinResetWithHttpInfo(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion);
        return resp.getData();
    }

    /**
     * task for \&quot;Voicemail PIN reset\&quot; scenario
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @return ApiResponse&lt;TaskResponseVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TaskResponseVM> vmPinResetWithHttpInfo(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion) throws ApiException {
        com.squareup.okhttp.Call call = vmPinResetValidateBeforeCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, null, null);
        Type localVarReturnType = new TypeToken<TaskResponseVM>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * task for \&quot;Voicemail PIN reset\&quot; scenario (asynchronously)
     * 
     * @param body  (required)
     * @param authorization A header in NaaS API calls to provide token details. Format: **Bearer** ***access_token*** (required)
     * @param xGroupID Unique String (or mnemonic) representing the group to which a consumer belongs. (required)
     * @param id Identifier of a Service Instance. (required)
     * @param xCorrelationID UUID. Used for business transaction correlation in the Logs. (optional)
     * @param xLatestVersion NaaS TMF API Version &lt;a href&#x3D;&#x27;https://wiki.proteuscd.corp.telstra.com/display/NIIM/TMF+OpenAPI+Version+vs+Network+Service+Specification+Version&#x27;&gt;Learn more about versions&lt;/a&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vmPinResetAsync(TaskRequest body, String authorization, String xGroupID, String id, String xCorrelationID, String xLatestVersion, final ApiCallback<TaskResponseVM> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vmPinResetValidateBeforeCall(body, authorization, xGroupID, id, xCorrelationID, xLatestVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskResponseVM>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
